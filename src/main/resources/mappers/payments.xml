<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.test.teamproject_back.repository.PaymentsMapper">
    <resultMap id="paymentResultMap" type="org.test.teamproject_back.entity.Payment">
        <id property="paymentId" column="payment_id"></id>
        <result property="paymentMethod" column="payment_method"></result>
        <result property="paymentStatus" column="payment_status"></result>
        <result property="amount" column="amount"></result>
        <result property="paymentDate" column="payment_date"></result>
        <result property="paymentNum" column="payment_num"></result>
        <association property="order" resultMap="orderResultMap"></association>
        <collection property="orderItem" resultMap="orderItemResultMap"></collection>
    </resultMap>
    <resultMap id="orderResultMap" type="org.test.teamproject_back.entity.Order">
        <id property="orderId" column="order_id"></id>
        <result property="orderStatus" column="order_status"></result>
        <result property="createdAt" column="created_at"></result>
        <result property="totalAmount" column="total_amount"></result>
        <collection property="userList" resultMap="userResultMap"></collection>
    </resultMap>
    <resultMap id="userResultMap" type="org.test.teamproject_back.entity.User">
        <id property="userId" column="user_id"></id>
        <result property="username" column="username"></result>
        <result property="name" column="name"></result>
    </resultMap>
    <resultMap id="orderItemResultMap" type="org.test.teamproject_back.entity.OrderItem">
        <id property="orderItemId" column="order_item_id"></id>
        <result property="orderId" column="order_id"></result>
        <result property="productId" column="product_id"></result>
        <result property="price" column="price"></result>
        <result property="quantity" column="quantity"></result>
        <association property="product" resultMap="productResultMap"></association>
    </resultMap>
    <resultMap id="productResultMap" type="org.test.teamproject_back.entity.Product">
        <id property="productId" column="product_id"></id>
        <result property="title" column="title"></result>
        <result property="price" column="price"></result>
        <result property="stock" column="stock"></result>
        <result property="salesCount" column="sales_count"></result>
        <result property="description" column="description"></result>
        <result property="origin" column="origin"></result>
        <result property="thumbnailImg" column="thumbnail_img"></result>
        <result property="contentsImg1" column="contents_img1"></result>
        <result property="contentsImg2" column="contents_img2"></result>
        <result property="contentsImg3" column="contents_img3"></result>
        <result property="contentsImg4" column="contents_img4"></result>
        <result property="createdDate" column="created_date"></result>
    </resultMap>
    <insert id="addPayment">
        insert into payments_tb
        values (0, #{orderId}, #{paymentMethod}, #{paymentStatus}, #{amount}, #{paymentNum}, now())
    </insert>
    <update id="updatePaymentStatus">
        update payments_tb
        set
            payment_status = #{paymentStatus}
        where
            payment_num = #{paymentId}
    </update>
    <select id="findPaymentList" resultMap="paymentResultMap">
        select
            pt.payment_id,
            pt.order_id,
            pt.payment_method,
            pt.payment_status,
            pt.amount,
            pt.payment_date,
            ot.order_status,
            ot.total_amount,
            ut.user_id,
            ut.username,
            ut.name,
            oit.quantity,
            oit.price,
            prt.title
        from
            payments_tb pt
            left outer join orders_tb ot on(ot.order_id = pt.order_id)
            left outer join order_items_tb oit on(oit.order_id = pt.order_id)
            left outer join users_tb ut on(ut.user_id = ot.user_id)
            left outer join products_tb prt on(prt.product_id = oit.product_id)
        where
            payment_status = #{paymentStatus}
        limit #{startIndex}, #{limit}
    </select>
    <select id="findMonthPaymentList" resultMap="paymentResultMap">
<!--        select-->
<!--            *-->
<!--        from-->
<!--            payments_tb-->
<!--        where-->
<!--            payment_status = #{paymentStatus}-->
<!--            and date_format(payment_date,'%Y-%m') = date_format(#{date},'%Y-%m')-->

        select
            months.month as payment as payment_date,
            ifnull(sum(pt.amount),0) as amount
        from
            (select
            1 as month union all
            select 2 union all
            select 3 union all
            select 4 union all
            select 5 union all
            select 6 union all
            select 7 union all
            select 8 union all
            select 9 union all
            select 10 union all
            select 11 union all
            select 12) as months
            left join payments_tb pt on MONTH(pt.payment_date) = months.month
            and year(payment_date) = '2024'
        GROUP BY
            months.month
        ORDER BY
            months.month asc;
    </select>
    <select id="findPaymentNumByOrderId" resultMap="paymentResultMap">
        select
            payment_num,
            amount
        from
            payments_tb
        where
            order_id = #{orderId}
    </select>
    <select id="getGraphData" resultMap="productResultMap">
        select
            title,
            stock
        from
            products_tb
        order by
            stock desc
        limit 5
    </select>
    <select id="findPaymentCount" resultType="java.lang.Integer">
        select
            count(*)
        from
            payments_tb
        where
            payment_status = #{paymentStatus}
    </select>
    <select id="findOrderItems" resultMap="orderItemResultMap">
        select
            oit.product_id,
            oit.quantity
        from
            payments_tb pt
            left outer join orders_tb ot on (pt.order_id = ot.order_id)
            left outer join order_items_tb oit on (ot.order_id = oit.order_id)
        where
            pt.payment_num = #{paymentId}
    </select>
</mapper>